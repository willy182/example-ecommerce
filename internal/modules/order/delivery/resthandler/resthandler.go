// Code generated by candi v1.18.4.

package resthandler

import (
	"encoding/json"
	"io"
	"net/http"

	"example-ecommerce/internal/modules/order/domain"
	"example-ecommerce/pkg/shared/usecase"

	"github.com/golangid/candi/candihelper"
	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/interfaces"
	"github.com/golangid/candi/tracer"
	"github.com/golangid/candi/wrapper"
	"github.com/google/uuid"
)

// RestHandler handler
type RestHandler struct {
	mw        interfaces.Middleware
	uc        usecase.Usecase
	validator interfaces.Validator
}

// NewRestHandler create new rest handler
func NewRestHandler(uc usecase.Usecase, deps dependency.Dependency) *RestHandler {
	return &RestHandler{
		uc: uc, mw: deps.GetMiddleware(), validator: deps.GetValidator(),
	}
}

// Mount handler with root "/"
// handling version in here
func (h *RestHandler) Mount(root interfaces.RESTRouter) {
	v1Order := root.Group(candihelper.V1)

	v1Order.GET("/transactions", h.getAllOrder, h.mw.HTTPBearerAuth)
	v1Order.POST("/topup", h.topup, h.mw.HTTPBearerAuth)
	v1Order.POST("/pay", h.payment, h.mw.HTTPBearerAuth)
	v1Order.POST("/transfer", h.transfer, h.mw.HTTPBearerAuth)
}

// GetAllOrder documentation
// @Summary			Get All Order
// @Description		API for get all order transactions
// @Tags			Order
// @Accept			json
// @Produce			json
// @Param			page	query	string	false	"Page with default value is 1"
// @Param			limit	query	string	false	"Limit with default value is 10"
// @Param			search	query	string	false	"Search"
// @Param			orderBy	query	string	false	"Order By"
// @Param			sort	query	string	false	"Sort (ASC DESC)"
// @Success			200	{object}	domain.ResponseOrderList
// @Success			400	{object}	wrapper.HTTPResponse
// @Security		ApiKeyAuth
// @Router			/v1/transactions [get]
func (h *RestHandler) getAllOrder(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "OrderDeliveryREST:GetAllOrder")
	defer trace.Finish()

	tokenClaim := candishared.ParseTokenClaimFromContext(ctx) // must using HTTPBearerAuth in middleware for this handler

	var filter domain.FilterOrder
	if err := candihelper.ParseFromQueryParam(req.URL.Query(), &filter); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed parse filter", err).JSON(rw)
		return
	}

	if err := h.validator.ValidateDocument("order/get_all", filter); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate filter", err).JSON(rw)
		return
	}

	filter.UserID = tokenClaim.Subject
	result, err := h.uc.Order().GetAllOrder(ctx, &filter)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	message := "Success"
	response := wrapper.NewHTTPResponse(http.StatusOK, message, result.Data)
	response.Meta = result.Meta
	response.JSON(rw)
}

// Topup documentation
// @Summary			Topup
// @Description		API for topup
// @Tags			Order
// @Accept			json
// @Produce			json
// @Param			data	body	domain.RequestTopup	true	"Body Data"
// @Success			200	{object}	domain.ResponseTopup
// @Success			400	{object}	wrapper.HTTPResponse
// @Security		ApiKeyAuth
// @Router			/v1/topup [post]
func (h *RestHandler) topup(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "OrderDeliveryREST:Topup")
	defer trace.Finish()

	tokenClaim := candishared.ParseTokenClaimFromContext(ctx) // must using HTTPBearerAuth in middleware for this handler

	body, _ := io.ReadAll(req.Body)
	if err := h.validator.ValidateDocument("order/topup", body); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(rw)
		return
	}

	var payload domain.RequestTopup
	if err := json.Unmarshal(body, &payload); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	payload.UserID, _ = uuid.Parse(tokenClaim.Subject)
	res, err := h.uc.Order().Topup(ctx, &payload)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusCreated, "Success", res).JSON(rw)
}

// Payment documentation
// @Summary			Payment
// @Description		API for payment
// @Tags			Order
// @Accept			json
// @Produce			json
// @Param			data	body	domain.RequestPayment	true	"Body Data"
// @Success			200	{object}	domain.ResponsePayment
// @Success			400	{object}	wrapper.HTTPResponse
// @Security		ApiKeyAuth
// @Router			/v1/pay [post]
func (h *RestHandler) payment(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "OrderDeliveryREST:Payment")
	defer trace.Finish()

	tokenClaim := candishared.ParseTokenClaimFromContext(ctx) // must using HTTPBearerAuth in middleware for this handler

	body, _ := io.ReadAll(req.Body)
	if err := h.validator.ValidateDocument("order/payment", body); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(rw)
		return
	}

	var payload domain.RequestPayment
	if err := json.Unmarshal(body, &payload); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	payload.UserID, _ = uuid.Parse(tokenClaim.Subject)
	res, err := h.uc.Order().Payment(ctx, &payload)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusCreated, "Success", res).JSON(rw)
}

// Transfer documentation
// @Summary			Transfer
// @Description		API for payment
// @Tags			Order
// @Accept			json
// @Produce			json
// @Param			data	body	domain.RequestTransfer	true	"Body Data"
// @Success			200	{object}	domain.ResponseTransfer
// @Success			400	{object}	wrapper.HTTPResponse
// @Security		ApiKeyAuth
// @Router			/v1/transfer [post]
func (h *RestHandler) transfer(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "OrderDeliveryREST:Transfer")
	defer trace.Finish()

	tokenClaim := candishared.ParseTokenClaimFromContext(ctx) // must using HTTPBearerAuth in middleware for this handler

	body, _ := io.ReadAll(req.Body)
	if err := h.validator.ValidateDocument("order/transfer", body); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(rw)
		return
	}

	var payload domain.RequestTransfer
	if err := json.Unmarshal(body, &payload); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	payload.UserID, _ = uuid.Parse(tokenClaim.Subject)
	res, err := h.uc.Order().Transfer(ctx, &payload)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusCreated, "Success", res).JSON(rw)
}
