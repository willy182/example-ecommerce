// Code generated by candi v1.18.4.

package workerhandler

import (
	"encoding/json"
	"fmt"
	"time"

	"example-ecommerce/internal/modules/order/domain"
	"example-ecommerce/pkg/shared/usecase"

	"github.com/golangid/candi/candishared"
	taskqueueworker "github.com/golangid/candi/codebase/app/task_queue_worker"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/factory/types"
	"github.com/golangid/candi/codebase/interfaces"
	"github.com/golangid/candi/tracer"
)

// TaskQueueHandler struct
type TaskQueueHandler struct {
	uc        usecase.Usecase
	validator interfaces.Validator
}

// NewTaskQueueHandler constructor
func NewTaskQueueHandler(uc usecase.Usecase, deps dependency.Dependency) *TaskQueueHandler {
	return &TaskQueueHandler{
		uc:        uc,
		validator: deps.GetValidator(),
	}
}

// MountHandlers mount handler group
func (h *TaskQueueHandler) MountHandlers(group *types.WorkerHandlerGroup) {
	group.Add("TRANSFER", h.handleTaskTransfer,
		types.WorkerHandlerOptionAddConfig(taskqueueworker.TaskOptionDeleteJobAfterSuccess, false),
	)
}

func (h *TaskQueueHandler) handleTaskTransfer(eventContext *candishared.EventContext) error {
	trace, ctx := tracer.StartTraceWithContext(eventContext.Context(), "OrderDeliveryTaskQueue:HandleTaskTransfer")
	defer trace.Finish()

	fmt.Printf("executing task '%s' has been %s retry, with message: %s\n",
		eventContext.HandlerRoute(),
		eventContext.Header()["retries"],
		eventContext.Message(),
	)

	var data domain.ReceiveTransfer
	if err := json.Unmarshal(eventContext.Message(), &data); err != nil {
		trace.SetError(err)
		return err
	}

	// exec usecase
	err := h.uc.Order().TransferFrom(ctx, &data)
	time.Sleep(10 * time.Second) // just for example process

	if err != nil {
		return &candishared.ErrorRetrier{
			Delay:   5 * time.Second,
			Message: err.Error(),
		}
	}

	return nil
}
