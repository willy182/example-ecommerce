// Code generated by candi v1.18.4.

package usecase

import (
	"context"

	"example-ecommerce/internal/modules/order/domain"
	"example-ecommerce/pkg/shared/repository"
	"example-ecommerce/pkg/shared/usecase/common"

	"github.com/golangid/candi/codebase/factory/dependency"
)

// OrderUsecase abstraction
type OrderUsecase interface {
	GetAllOrder(ctx context.Context, filter *domain.FilterOrder) (data domain.ResponseOrderList, err error)
	Topup(ctx context.Context, data *domain.RequestTopup) (res domain.ResponseTopup, err error)
	Payment(ctx context.Context, data *domain.RequestPayment) (res domain.ResponsePayment, err error)
	Transfer(ctx context.Context, data *domain.RequestTransfer) (res domain.ResponseTransfer, err error)
	TransferFrom(ctx context.Context, data *domain.ReceiveTransfer) (err error)
}

type orderUsecaseImpl struct {
	deps          dependency.Dependency
	sharedUsecase common.Usecase
	repoSQL       repository.RepoSQL
	// repoMongo     repository.RepoMongo
}

// NewOrderUsecase usecase impl constructor
func NewOrderUsecase(deps dependency.Dependency) (OrderUsecase, func(sharedUsecase common.Usecase)) {
	uc := &orderUsecaseImpl{
		deps:    deps,
		repoSQL: repository.GetSharedRepoSQL(),
		// repoMongo: repository.GetSharedRepoMongo(),

	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
