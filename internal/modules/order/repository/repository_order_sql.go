// Code generated by candi v1.18.4.

package repository

import (
	"context"
	"strings"
	"time"

	"example-ecommerce/internal/modules/order/domain"
	"example-ecommerce/pkg/shared"
	shareddomain "example-ecommerce/pkg/shared/domain"

	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/tracer"
	"github.com/google/uuid"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

type orderRepoSQL struct {
	readDB, writeDB *gorm.DB
	updateTools     *candishared.DBUpdateTools
}

// NewOrderRepoSQL repo constructor
func NewOrderRepoSQL(readDB, writeDB *gorm.DB) OrderRepository {
	return &orderRepoSQL{
		readDB: readDB, writeDB: writeDB,
		updateTools: &candishared.DBUpdateTools{
			KeyExtractorFunc: candishared.DBUpdateGORMExtractorKey, IgnoredFields: []string{"id"},
		},
	}
}

func (r *orderRepoSQL) FetchAll(ctx context.Context, filter *domain.FilterOrder) (data []shareddomain.Order, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "OrderRepoSQL:FetchAll")
	defer func() { trace.Finish(tracer.FinishWithError(err)) }()

	if filter.OrderBy == "" {
		filter.OrderBy = "updated_at"
	}

	db := r.setFilterOrder(shared.SetSpanToGorm(ctx, r.readDB), filter).Order(clause.OrderByColumn{
		Column: clause.Column{Name: filter.OrderBy},
		Desc:   strings.ToUpper(filter.Sort) == "DESC",
	})
	if filter.Limit > 0 || !filter.ShowAll {
		db = db.Limit(filter.Limit).Offset(filter.CalculateOffset())
	}
	err = db.Find(&data).Error
	return
}

func (r *orderRepoSQL) Count(ctx context.Context, filter *domain.FilterOrder) (count int) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "OrderRepoSQL:Count")
	defer trace.Finish()

	var total int64
	r.setFilterOrder(shared.SetSpanToGorm(ctx, r.readDB), filter).Model(&shareddomain.Order{}).Count(&total)
	count = int(total)

	trace.Log("count", count)
	return
}

func (r *orderRepoSQL) Find(ctx context.Context, filter *domain.FilterOrder) (result shareddomain.Order, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "OrderRepoSQL:Find")
	defer func() { trace.Finish(tracer.FinishWithError(err)) }()

	err = r.setFilterOrder(shared.SetSpanToGorm(ctx, r.readDB), filter).First(&result).Error
	return
}

func (r *orderRepoSQL) Save(ctx context.Context, data *shareddomain.Order, updateOptions ...candishared.DBUpdateOptionFunc) (id uuid.UUID, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "OrderRepoSQL:Save")
	defer func() { trace.Finish(tracer.FinishWithError(err)) }()

	db := r.writeDB
	if tx, ok := candishared.GetValueFromContext(ctx, candishared.ContextKeySQLTransaction).(*gorm.DB); ok {
		db = tx
	}
	data.UpdatedAt = time.Now()
	if data.CreatedAt.IsZero() {
		data.CreatedAt = time.Now()
	}

	txDB := new(gorm.DB)
	if data.ID == uuid.Nil {
		data.ID = uuid.New()
		txDB = shared.SetSpanToGorm(ctx, db).Omit(clause.Associations).Create(data)
	} else {
		txDB = shared.SetSpanToGorm(ctx, db).Model(data).Omit(clause.Associations).Updates(r.updateTools.ToMap(data, updateOptions...))
	}

	if txDB.Error != nil {
		err = txDB.Error
		return
	}

	id = data.ID

	return
}

func (r *orderRepoSQL) Delete(ctx context.Context, filter *domain.FilterOrder) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "OrderRepoSQL:Delete")
	defer func() { trace.Finish(tracer.FinishWithError(err)) }()

	db := r.writeDB
	if tx, ok := candishared.GetValueFromContext(ctx, candishared.ContextKeySQLTransaction).(*gorm.DB); ok {
		db = tx
	}
	err = r.setFilterOrder(shared.SetSpanToGorm(ctx, db), filter).Delete(&shareddomain.Order{}).Error
	return
}

func (r *orderRepoSQL) setFilterOrder(db *gorm.DB, filter *domain.FilterOrder) *gorm.DB {
	if filter.ID != "" {
		db = db.Where("id = ?", filter.ID)
	}
	if filter.UserID != "" {
		db = db.Where("user_id = ?", filter.UserID)
	}
	if filter.TransactionType != "" {
		db = db.Where("type_transaction = ?", filter.TransactionType)
	}

	for _, preload := range filter.Preloads {
		db = db.Preload(preload)
	}

	return db
}
