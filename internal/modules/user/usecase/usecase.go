// Code generated by candi v1.18.4.

package usecase

import (
	"context"

	"example-ecommerce/internal/modules/user/domain"
	"example-ecommerce/pkg/shared/repository"
	"example-ecommerce/pkg/shared/usecase/common"

	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
)

// UserUsecase abstraction
type UserUsecase interface {
	CreateUser(ctx context.Context, data *domain.RequestUser) (res domain.ResponseUser, err error)
	Login(ctx context.Context, data *domain.LoginUser) (res domain.ResponseLogin, statusCode int, err error)
	ValidateToken(ctx context.Context, token string) (*candishared.TokenClaim, error)
}

type userUsecaseImpl struct {
	deps          dependency.Dependency
	sharedUsecase common.Usecase
	repoSQL       repository.RepoSQL
	// repoMongo     repository.RepoMongo
}

// NewUserUsecase usecase impl constructor
func NewUserUsecase(deps dependency.Dependency) (UserUsecase, func(sharedUsecase common.Usecase)) {
	uc := &userUsecaseImpl{
		deps:    deps,
		repoSQL: repository.GetSharedRepoSQL(),
		// repoMongo: repository.GetSharedRepoMongo(),

	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
