// Code generated by candi v1.18.4.

package resthandler

import (
	"encoding/json"
	"io"
	"net/http"

	"example-ecommerce/internal/modules/user/domain"
	"example-ecommerce/pkg/shared/usecase"

	"github.com/golangid/candi/candihelper"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/interfaces"
	"github.com/golangid/candi/tracer"
	"github.com/golangid/candi/wrapper"
	// httpSwagger "github.com/swaggo/http-swagger"
)

// RestHandler handler
type RestHandler struct {
	mw        interfaces.Middleware
	uc        usecase.Usecase
	validator interfaces.Validator
}

// NewRestHandler create new rest handler
func NewRestHandler(uc usecase.Usecase, deps dependency.Dependency) *RestHandler {
	return &RestHandler{
		uc: uc, mw: deps.GetMiddleware(), validator: deps.GetValidator(),
	}
}

// Mount handler with root "/"
// handling version in here
func (h *RestHandler) Mount(root interfaces.RESTRouter) {
	// root.GET("/swagger/*", httpSwagger.WrapHandler)

	v1User := root.Group(candihelper.V1)

	v1User.POST("/register", h.createUser)
	v1User.POST("/login", h.login)
}

// CreateUser documentation
// @Summary			Create User
// @Description		API for create user
// @Tags			User
// @Accept			json
// @Produce			json
// @Param			data	body	domain.RequestUser	true	"Body Data"
// @Success			200	{object}	domain.ResponseUser
// @Success			400	{object}	wrapper.HTTPResponse
// @Security		ApiKeyAuth
// @Router			/v1/register [post]
func (h *RestHandler) createUser(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "UserDeliveryREST:CreateUser")
	defer trace.Finish()

	body, _ := io.ReadAll(req.Body)
	if err := h.validator.ValidateDocument("user/register", body); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(rw)
		return
	}

	var payload domain.RequestUser
	if err := json.Unmarshal(body, &payload); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	res, err := h.uc.User().CreateUser(ctx, &payload)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusCreated, "Success", res).JSON(rw)
}

// Login documentation
// @Summary			Login
// @Description		API for create user
// @Tags			User
// @Accept			json
// @Produce			json
// @Param			data	body	domain.LoginUser	true	"Body Data"
// @Success			200	{object}	domain.ResponseLogin
// @Success			400	{object}	wrapper.HTTPResponse
// @Security		ApiKeyAuth
// @Router			/v1/login [post]
func (h *RestHandler) login(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "UserDeliveryREST:Login")
	defer trace.Finish()

	body, _ := io.ReadAll(req.Body)
	if err := h.validator.ValidateDocument("user/login", body); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(rw)
		return
	}

	var payload domain.LoginUser
	if err := json.Unmarshal(body, &payload); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	res, statusCode, err := h.uc.User().Login(ctx, &payload)
	if err != nil {
		wrapper.NewHTTPResponse(statusCode, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(statusCode, "Success", res).JSON(rw)
}
