// Code generated by candi v1.18.4.

package main

import (
	"context"
	"embed"
	"flag"
	"log"
	"os"

	"example-ecommerce/cmd/migration/migrations"

	"github.com/golangid/candi/candihelper"
	"github.com/golangid/candi/config/env"

	"github.com/pressly/goose/v3"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

//go:embed migrations/*.sql
var migrationSource embed.FS

var (
	flags = flag.NewFlagSet("goose", flag.ExitOnError)
)

func main() {
	env.Load("example-ecommerce")
	ctx := context.Background()

	dsn := env.BaseEnv().DbSQLWriteDSN
	gormWrite, err := gorm.Open(postgres.New(postgres.Config{
		DSN: dsn,
	}), &gorm.Config{
		SkipDefaultTransaction:                   true,
		DisableForeignKeyConstraintWhenMigrating: true,
	})
	if err != nil {
		log.Fatal(err)
	}
	db, err := gormWrite.DB()
	if err != nil {
		log.Fatal(err)
	}

	flags.Parse(os.Args[1:])
	args := flags.Args()
	arguments := []string{}
	if len(args) > 3 {
		arguments = append(arguments, args[3:]...)
	}

	goose.SetDialect("postgres")
	goose.SetBaseFS(migrationSource)
	switch args[0] {
	case "create":
		migrationType := "sql"
		if len(args) > 2 {
			migrationType = args[2]
		}
		if err := goose.Create(db, os.Getenv("WORKDIR") + "cmd/migration/migrations", args[1], migrationType); err != nil {
			log.Fatalf("goose %v: %v", args[1], err)
		}

	default:
		if migrateTables := migrations.GetMigrateTables(); len(migrateTables) > 0 {
			tx := gormWrite.Begin()
			if err := gormWrite.AutoMigrate(migrateTables...); err != nil {
				tx.Rollback()
				log.Fatal(err)
			}
			tx.Commit()
		}

		if err := goose.RunWithOptionsContext(ctx, args[0], db, "migrations", arguments, goose.WithAllowMissing()); err != nil {
			log.Fatalf("goose %v: %v", args[0], err)
		}
	}
	log.Printf("\x1b[32;1mMigration to \"%s\" success\x1b[0m\n", candihelper.MaskingPasswordURL(env.BaseEnv().DbSQLWriteDSN))
}
